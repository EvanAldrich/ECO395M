import numpy as np
# Set the directory where your data is stored
data_dir = 'EuroSAT_RGB'
# Set the batch size for training and testing
batch_size = 4
# Define a transformation to apply to the images
transform = transforms.Compose(
[transforms.Resize((32, 32)),  # Resize images to 32x32
transforms.ToTensor(),  # Convert image to PyTorch Tensor data type
transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])  # Normalize the images
# Load the training data
dataset = ImageFolder(root=data_dir, transform=transform)
# Create data loaders for training and testing datasets
data_loader = torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=True)
# Print some samples to verify the data loading
data_iter = iter(data_loader)
images, labels = data_iter.next()
print(images.shape, labels.shape)
# Function to show an image
def imshow(img):
img = img / 2 + 0.5  # Unnormalize
npimg = img.numpy()
plt.imshow(np.transpose(npimg, (1, 2, 0)))
plt.show()
# Get some random training images
dataiter = iter(data_loader)
images, labels = dataiter.next()
# Show images
imshow(torchvision.utils.make_grid(images))
# Print labels
print(' '.join('%5s' % dataset.classes[labels[j]] for j in range(batch_size)))
reticulate::repl_python()
# Necessary Imports
import torch
import torchvision
import torchvision.transforms as transforms
from torchvision.datasets import ImageFolder
import matplotlib.pyplot as plt
import numpy as np
# Set the directory where your data is stored
data_dir = 'EuroSAT_RGB'
# Set the batch size for training and testing
batch_size = 4
# Define a transformation to apply to the images
transform = transforms.Compose(
[transforms.Resize((32, 32)),  # Resize images to 32x32
transforms.ToTensor(),  # Convert image to PyTorch Tensor data type
transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])  # Normalize the images
# Load the training data
dataset = ImageFolder(root=data_dir, transform=transform)
# Create data loaders for training and testing datasets
data_loader = torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=True)
# Print some samples to verify the data loading
data_iter = iter(data_loader)
images, labels = data_iter.next()
print(images.shape, labels.shape)
# Function to show an image
def imshow(img):
img = img / 2 + 0.5  # Unnormalize
npimg = img.numpy()
plt.imshow(np.transpose(npimg, (1, 2, 0)))
plt.show()
# Get some random training images
dataiter = iter(data_loader)
images, labels = dataiter.next()
# Show images
imshow(torchvision.utils.make_grid(images))
# Print labels
print(' '.join('%5s' % dataset.classes[labels[j]] for j in range(batch_size)))
install.packages("keras")
install.packages("keras")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(ggplot2)
library(igraph)
library(arules)  # has a big ecosystem of packages built around it
library(arulesViz)
library(reticulate)
install.packages("keras")
library(keras)
install.packages("keras")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(ggplot2)
library(igraph)
library(arules)  # has a big ecosystem of packages built around it
library(arulesViz)
library(reticulate)
install.packages("keras")
library(keras)
data1 = read.csv("video_games.csv")
data2 = read.csv("2013_Video_Games_Dataset.csv")
data1 = na.omit(data1)
data2 = na.omit(data2)
vg_data = merge(data1, data2, by = c("Title", "Console"))
vg_data = na.omit(vg_data)
vg_data = filter(vg_data, Length.All.PlayStyles.Average > 0)
write.csv(vg_data, "vg_data.csv")
#time to beat data
data1 = read.csv("video_games.csv")
data2 = read.csv("2013_Video_Games_Dataset.csv")
data1 = na.omit(data1)
data2 = na.omit(data2)
vg_data = merge(data1, data2, by = c("Title", "Console"))
vg_data = na.omit(vg_data)
vg_data = filter(vg_data, Length.All.PlayStyles.Average > 0)
write.csv(vg_data, "vg_data.csv")
setwd("C:/Users/Evan/Documents/GitHub/ECO395M/ECO395MProject")
data1 = read.csv("video_games.csv")
data2 = read.csv("2013_Video_Games_Dataset.csv")
data1 = na.omit(data1)
data2 = na.omit(data2)
vg_data = merge(data1, data2, by = c("Title", "Console"))
vg_data = na.omit(vg_data)
vg_data = filter(vg_data, Length.All.PlayStyles.Average > 0)
write.csv(vg_data, "vg_data.csv")
vg_data = read.csv("vg_data.csv")
vg_2016 = read.csv("vgsales2016.csv")
vg_merge = merge(data1, data2, by = c("Name"))
vg_merge = merge(vg_data, vg_2016, by = c("Name"))
write.csv(vg_merge, "vg_merge.csv")
vg_data = read.csv("vg_data.csv")
vg_2016 = read.csv("vgsales2016.csv")
vg_merge = merge(vg_data, vg_2016, by = c("Name", "Platform"))
write.csv(vg_merge, "vg_merge.csv")
vg_merge = read.csv("vg_merge.csv")
vg_merge = na.omit(vg_merge)
vg_merge
write.csv(vg_merge, "vg2_merge.csv")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(ggplot2)
library(modelr)
library(rsample)
library(mosaic)
library(foreach)
library(caret)
library(dplyr)
library(gamlr)
library(glmnet) # For lasso regression
library(pROC) # For ROC curve analysis
library(rpart)
library(rpart.plot)
library(randomForest)
library(lubridate)
library(gbm)
library(pdp)
library(osmdata)
library(tidyr)
y = vg_data$NA_Sales
d = vg_data$Length_Average
treat = glm( y ~ d )
y = vg_data$NA_Sales
d = vg_data$Length_Average
lm_d = gamlr::cv.gamlr(vg_data$Platform + vg_data$Review_Score + vg_data$Publisher + vg_data$Used_Price + vg_data$User_Score, d)
y = vg_data$NA_Sales
d = vg_data$Length_Average
lm_d = gamlr::cv.gamlr(vg_data$Platform vg_data$Review_Score vg_data$Publisher vg_data$Used_Price vg_data$User_Score, d)
y = vg_data$NA_Sales
d = vg_data$Length_Average
lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_score + Publisher")
lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(data_frame$Platform)
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_score + Publisher")
lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_score + Publisher")
#lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
lasso_model_treatment <- gamlr(x = model.matrix(treatment_formula, data = vg_data)[,-1], y = vg_data$Length_Average)
vg_data = read.csv("vg2_merge.csv")
set.seed(125)
vg_data$Sequel = factor(vg_data$Sequel)
vg_data$Max_Players = factor(vg_data$Max_Players)
vg_data$Year = factor(vg_data$Year)
vg_data$Online = factor(vg_data$Online)
vg_data$Licensed = factor(vg_data$Licensed)
vg_data$Handheld = factor(vg_data$Handheld)
vg_data$Multiplatform = factor(vg_data$Multiplatform)
vg_data$ThirdPerson = factor(vg_data$Third_Person)
vg_split = initial_split(vg_data, prop=0.8)
vg_train = training(vg_split)
vg_test = testing(vg_split)
tree_cart_big=rpart(NA_Sales ~ Review_Score + Used_Price +  Length_Average + Length_Leisure + Length_Median + Length_Rushed + User_Score + Sequel, data=vg_train, control=rpart.control(cp=0.0015, minsplit=30))
rpart.plot(tree_cart_big, digits=-5, type=4, extra=1)
a= rmse(tree_cart_big, vg_test)
a
tree_cart_big=rpart(JP_Sales ~ Review_Score + Used_Price +  Length_Average + Length_Leisure + Length_Median + Length_Rushed + User_Score + Sequel, data=vg_train, control=rpart.control(cp=0.0015, minsplit=30))
rpart.plot(tree_cart_big, digits=-5, type=4, extra=1)
a= rmse(tree_cart_big, vg_test)
a
tree_cart_big=rpart(EU_Sales ~ Review_Score + Used_Price +  Length_Average + Length_Leisure + Length_Median + Length_Rushed + User_Score + Sequel, data=vg_train, control=rpart.control(cp=0.0015, minsplit=30))
rpart.plot(tree_cart_big, digits=-5, type=4, extra=1)
a= rmse(tree_cart_big, vg_test)
a
ggplot(vg_data) + geom_point(aes(x=User_Score, y=Review_Score))
#ggplot(vgsales) + geom_histogram(aes(Global_Sales))
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_score + Publisher")
#lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
lasso_model_treatment <- gamlr(x = model.matrix(treatment_formula, data = vg_data)[,-1], y = vg_data$Length_Average)
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_Score + Publisher")
#lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
lasso_model_treatment <- gamlr(x = model.matrix(treatment_formula, data = vg_data)[,-1], y = vg_data$Length_Average)
predicted_treatment <- predict(lasso_model_treatment, type = "response")
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_Score + Publisher")
#lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
lasso_model_treatment <- gamlr(x = model.matrix(treatment_formula, data = vg_data)[,-1], y = vg_data$Length_Average)
predicted_treatment <- predict(lasso_model_treatment, s = "lambda.min", newx = X, type = "response")
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_Score + Publisher")
#lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
lasso_model_treatment <- gamlr(x = model.matrix(treatment_formula, data = vg_data)[,-1], y = vg_data$Length_Average)
predicted_treatment <- predict(lasso_model_treatment, s = "lambda.min", newx = X, newdata = vg_data, type = "response")
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_Score + Publisher")
#lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
lasso_model_treatment <- gamlr(x = model.matrix(treatment_formula, data = vg_data)[,-1], y = vg_data$Length_Average)
predicted_treatment <- predict(lasso_model_treatment, s = "lambda.min", newx = X, type = "response")
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_Score + Publisher")
#lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
lasso_model_treatment <- gamlr(x = model.matrix(treatment_formula, data = vg_data)[,-1], y = vg_data$Length_Average)
predicted_treatment <- predict(lasso_model_treatment, newx = X, type = "response")
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_Score + Publisher")
#lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
lasso_model_treatment <- gamlr(x = model.matrix(treatment_formula, data = vg_data)[,-1], y = vg_data$Length_Average)
predicted_treatment <- predict(lasso_model_treatment, s = "lambda.min", newx = X, type = "response")
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_Score + Publisher")
#lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
lasso_model_treatment <- gamlr(x = model.matrix(treatment_formula, data = vg_data)[,-1], y = vg_data$Length_Average)
predicted_treatment <- predict(lasso_model_treatment, s = "lambda.min", newx = X, type = "response")
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_Score + Publisher")
#lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
lasso_model_treatment <- gamlr(X = model.matrix(treatment_formula, data = vg_data)[,-1], y = vg_data$Length_Average)
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_Score + Publisher")
#lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
lasso_model_treatment <- gamlr(x = model.matrix(treatment_formula, data = vg_data)[,-1], y = vg_data$Length_Average)
predicted_treatment <- predict(lasso_model_treatment, s = "lambda.min", newx = x, type = "response")
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_Score + Publisher")
#lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
lasso_model_treatment <- gamlr(x = model.matrix(treatment_formula, data = vg_data)[,-1], y = vg_data$Length_Average)
predicted_treatment <- predict(lasso_model_treatment, s = "lambda.min", newdata = x, type = "response")
y = vg_data$NA_Sales
d = vg_data$Length_Average
#lm_d = gamlr::cv.gamlr( vg_data$Platform, vg_data$Review_Score, vg_data$Publisher, vg_data$Used_Price, vg_data$User_Score, d)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
treatment_formula <- as.formula("Length_Average ~ Platform + Review_Score + Used_Price + User_Score + Publisher")
#lasso_model_treatment <- gamlr(treatment_formula, data = vg_data)
lasso_model_treatment <- gamlr(x = model.matrix(treatment_formula, data = vg_data)[,-1], y = vg_data$Length_Average)
predicted_treatment <- predict(lasso_model_treatment, s = "lambda.min", newdata = vg_data, type = "response")
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_score + Publisher - 1, data = vg_data)
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, s = "lambda.min", type = "response")
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(Length_Average ~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, s = "lambda.min", type = "response")
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, s = "lambda.min", type = "response")
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, type = "response")
# Ensure that the predictions are correctly formatted for adding to the DataFrame
data_frame$predicted_treatment <- as.vector(predicted_treatment)
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, type = "response")
# Ensure that the predictions are correctly formatted for adding to the DataFrame
data_frame$predicted_treatment <- as.vector(predicted_treatment)
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, type = "response")
# Ensure that the predictions are correctly formatted for adding to the DataFrame
data_frame$predicted_treatment <- as.vector(predicted_treatment)
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, type = "response")
# Ensure that the predictions are correctly formatted for adding to the DataFrame
data_frame$predicted_treatment <- as.vector(predicted_treatment)
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, type = "response")
# Ensure that the predictions are correctly formatted for adding to the DataFrame
vg_data$predicted_treatment <- as.vector(predicted_treatment)
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, type = "response")
# Ensure that the predictions are correctly formatted for adding to the DataFrame
predicted_treatment <- as.vector(predicted_treatment)
# Prepare the model matrix for the outcome
X_outcome <- model.matrix(~ predicted_treatment + Platform + Review_Score + Used_Price + User_score + Publisher - 1, data_frame)
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, type = "response")
# Ensure that the predictions are correctly formatted for adding to the DataFrame
predicted_treatment <- as.vector(predicted_treatment)
# Prepare the model matrix for the outcome
X_outcome <- model.matrix(~ predicted_treatment + Platform + Review_Score + Used_Price + User_score + Publisher - 1, bg_data)
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, type = "response")
# Ensure that the predictions are correctly formatted for adding to the DataFrame
predicted_treatment <- as.vector(predicted_treatment)
# Prepare the model matrix for the outcome
X_outcome <- model.matrix(~ predicted_treatment + Platform + Review_Score + Used_Price + User_score + Publisher - 1, vg_data)
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, type = "response")
# Ensure that the predictions are correctly formatted for adding to the DataFrame
predicted_treatment <- as.vector(predicted_treatment)
# Prepare the model matrix for the outcome
X_outcome <- model.matrix(~ predicted_treatment + Platform + Review_Score + Used_Price + User_Score + Publisher - 1, vg_data)
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, type = "response")
# Ensure that the predictions are correctly formatted for adding to the DataFrame
predicted_treatment <- as.vector(predicted_treatment)
# Prepare the model matrix for the outcome
X_outcome <- model.matrix(~ predicted_treatment + Review_Score + Used_Price + User_Score + Publisher - 1, vg_data)
library(glmnet)
vg_data$Platform <- as.factor(vg_data$Platform)
vg_data$Publisher <- as.factor(vg_data$Publisher)
# Assuming you have a formula and data frame ready
# Convert your independent variables into a matrix format excluding the intercept
X <- model.matrix(~ Platform + Review_Score + Used_Price + User_Score + Publisher - 1, data = vg_data)
y <- vg_data$Length_Average  # Ensure this is your response variable
# Fit the lasso model using glmnet
lasso_model_treatment <- glmnet(X, y, alpha = 1)  # Lasso regression
# Predict using the fitted model; ensure newx is specified and matches the expected format
predicted_treatment <- predict(lasso_model_treatment, newx = X, type = "response")
# Ensure that the predictions are correctly formatted for adding to the DataFrame
predicted_treatment <- as.vector(predicted_treatment)
# Prepare the model matrix for the outcome
X_outcome <- model.matrix(~ predicted_treatment + Used_Price + User_Score + Publisher - 1, vg_data)
