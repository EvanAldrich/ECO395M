p_test = ggplot(data = sclass_65amg_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.5) +
ylim(500, 200000)
## trim 350
sclass_350 = sclass %>%
filter(trim == 350)
#split the data
sclass_350_split = initial_split(sclass_350, prop=0.8)
sclass_350_train = training(sclass_350_split)
sclass_350_test = testing(sclass_350_split)
#run knn for each k and calculate rmse for test data
rmse_350_test = foreach(i=2:330, .combine='c') %do% {
knn_model = knnreg(price ~ mileage, data=sclass_350_train, k=i)
modelr::rmse(knn_model, sclass_350_test)}
#plot
k_grid=2:330
rmse_350_test_df = data.frame(rmse_350_test)
plot_out=ggplot(rmse_350_test_df, aes(x = k_grid, y = rmse_350_test)) +
geom_line(color="blue") +
labs(x="K",
y="RMSE_test",
title="Out-of-sample RMSE (350)")
plot_out
# find optimal k
k_grid[which.min(rmse_350_test)]
# knn with optimal k
knn_opt = knnreg(price ~ mileage, data=sclass_350_train, k=k_grid[which.min(rmse_350_test)])
modelr::rmse(knn_opt, sclass_350_test)
# plot the fit
# attach the predictions to the test data frame
sclass_350_test = sclass_350_test %>%
mutate(price_pred = predict(knn_opt, sclass_350_test))
p_test = ggplot(data = sclass_350_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.5) +
ylim(500, 120000)
p_test
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred), color='red', size=1)+
labs(title="Prediction of price (350)")
## trim 65AMG
sclass_65amg = sclass %>%
filter(trim == "65 AMG")
#split the data
sclass_65amg_split = initial_split(sclass_65amg, prop=0.8)
sclass_65amg_train = training(sclass_65amg_split)
sclass_65amg_test = testing(sclass_65amg_split)
#run knn for each k and calculate rmse for test data
rmse_65amg_test = foreach(i=2:230, .combine='c') %do% {
knn_model = knnreg(price ~ mileage, data=sclass_65amg_train, k=i)
modelr::rmse(knn_model, sclass_65amg_test)}
#plot
k_grid=2:230
rmse_65_test_df = data.frame(rmse_65amg_test)
plot_out=ggplot(rmse_65_test_df, aes(x = k_grid, y = rmse_65amg_test)) +
geom_line(color="blue") +
labs(x="K",
y="RMSE_test",
title="Out-of-sample RMSE (65AMG)")
plot_out
# find optimal k
k_grid[which.min(rmse_65amg_test)]
# knn with optimal k
knn_opt = knnreg(price ~ mileage, data=sclass_65amg_train, k=k_grid[which.min(rmse_65amg_test)])
modelr::rmse(knn_opt, sclass_65amg_test)
# plot the fit
# attach the predictions to the test data frame
sclass_65amg_test = sclass_65amg_test %>%
mutate(price_pred = predict(knn_opt, sclass_65amg_test))
p_test = ggplot(data = sclass_65amg_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.5) +
ylim(500, 200000)
p_test
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred), color='green', size=1)+
labs(title="Prediction of price (65AMG)")
library(tidyverse)
library(rsample)
library(caret)
library(modelr)
library(parallel)
library(foreach)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(class)
library(RANN)
library(caret)
library(modelr)
library(parallel)
library(foreach)
sclass <- read.csv("~/Documents/data/sclass.csv")
## trim 350
sclass_350 = sclass %>%
filter(trim == 350)
#split the data
sclass_350_split = initial_split(sclass_350, prop=0.8)
sclass_350_train = training(sclass_350_split)
sclass_350_test = testing(sclass_350_split)
#run knn for each k and calculate rmse for test data
rmse_350_test = foreach(i=2:330, .combine='c') %do% {
knn_model = knnreg(price ~ mileage, data=sclass_350_train, k=i)
modelr::rmse(knn_model, sclass_350_test)}
#plot
k_grid=2:330
rmse_350_test_df = data.frame(rmse_350_test)
plot_out=ggplot(rmse_350_test_df, aes(x = k_grid, y = rmse_350_test)) +
geom_line(color="blue") +
labs(x="K",
y="RMSE_test",
title="Out-of-sample RMSE (350)")
plot_out
# find optimal k
k_grid[which.min(rmse_350_test)]
# knn with optimal k
knn_opt = knnreg(price ~ mileage, data=sclass_350_train, k=k_grid[which.min(rmse_350_test)])
modelr::rmse(knn_opt, sclass_350_test)
# plot the fit
# attach the predictions to the test data frame
sclass_350_test = sclass_350_test %>%
mutate(price_pred = predict(knn_opt, sclass_350_test))
p_test = ggplot(data = sclass_350_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.5) +
ylim(500, 120000)
p_test
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred), color='red', size=1)+
labs(title="Prediction of price (350)")
## trim 65AMG
sclass_65amg = sclass %>%
filter(trim == "65 AMG")
#split the data
sclass_65amg_split = initial_split(sclass_65amg, prop=0.8)
sclass_65amg_train = training(sclass_65amg_split)
sclass_65amg_test = testing(sclass_65amg_split)
#run knn for each k and calculate rmse for test data
rmse_65amg_test = foreach(i=2:230, .combine='c') %do% {
knn_model = knnreg(price ~ mileage, data=sclass_65amg_train, k=i)
modelr::rmse(knn_model, sclass_65amg_test)}
#plot
k_grid=2:230
rmse_65_test_df = data.frame(rmse_65amg_test)
plot_out=ggplot(rmse_65_test_df, aes(x = k_grid, y = rmse_65amg_test)) +
geom_line(color="blue") +
labs(x="K",
y="RMSE_test",
title="Out-of-sample RMSE (65AMG)")
plot_out
# find optimal k
k_grid[which.min(rmse_65amg_test)]
# knn with optimal k
knn_opt = knnreg(price ~ mileage, data=sclass_65amg_train, k=k_grid[which.min(rmse_65amg_test)])
modelr::rmse(knn_opt, sclass_65amg_test)
# plot the fit
# attach the predictions to the test data frame
sclass_65amg_test = sclass_65amg_test %>%
mutate(price_pred = predict(knn_opt, sclass_65amg_test))
p_test = ggplot(data = sclass_65amg_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.5) +
ylim(500, 200000)
p_test
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred), color='green', size=1)+
labs(title="Prediction of price (65AMG)")
#Q3
sclass <- read.csv("sclass.csv")
## trim 350
sclass_350 = sclass %>%
filter(trim == 350)
#split the data
sclass_350_split = initial_split(sclass_350, prop=0.8)
sclass_350_train = training(sclass_350_split)
sclass_350_test = testing(sclass_350_split)
#run knn for each k and calculate rmse for test data
rmse_350_test = foreach(i=2:330, .combine='c') %do% {
knn_model = knnreg(price ~ mileage, data=sclass_350_train, k=i)
modelr::rmse(knn_model, sclass_350_test)}
#plot
k_grid=2:330
rmse_350_test_df = data.frame(rmse_350_test)
plot_out=ggplot(rmse_350_test_df, aes(x = k_grid, y = rmse_350_test)) +
geom_line(color="blue") +
labs(x="K",
y="RMSE_test",
title="Out-of-sample RMSE (350)")
plot_out
# find optimal k
k_grid[which.min(rmse_350_test)]
# knn with optimal k
knn_opt = knnreg(price ~ mileage, data=sclass_350_train, k=k_grid[which.min(rmse_350_test)])
modelr::rmse(knn_opt, sclass_350_test)
# plot the fit
# attach the predictions to the test data frame
sclass_350_test = sclass_350_test %>%
mutate(price_pred = predict(knn_opt, sclass_350_test))
p_test = ggplot(data = sclass_350_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.5) +
ylim(500, 120000)
p_test
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred), color='red', size=1)+
labs(title="Prediction of price (350)")
## trim 65AMG
sclass_65amg = sclass %>%
filter(trim == "65 AMG")
#split the data
sclass_65amg_split = initial_split(sclass_65amg, prop=0.8)
sclass_65amg_train = training(sclass_65amg_split)
sclass_65amg_test = testing(sclass_65amg_split)
#run knn for each k and calculate rmse for test data
rmse_65amg_test = foreach(i=2:230, .combine='c') %do% {
knn_model = knnreg(price ~ mileage, data=sclass_65amg_train, k=i)
modelr::rmse(knn_model, sclass_65amg_test)}
#plot
k_grid=2:230
rmse_65_test_df = data.frame(rmse_65amg_test)
plot_out=ggplot(rmse_65_test_df, aes(x = k_grid, y = rmse_65amg_test)) +
geom_line(color="blue") +
labs(x="K",
y="RMSE_test",
title="Out-of-sample RMSE (65AMG)")
plot_out
# find optimal k
k_grid[which.min(rmse_65amg_test)]
# knn with optimal k
knn_opt = knnreg(price ~ mileage, data=sclass_65amg_train, k=k_grid[which.min(rmse_65amg_test)])
modelr::rmse(knn_opt, sclass_65amg_test)
# plot the fit
# attach the predictions to the test data frame
sclass_65amg_test = sclass_65amg_test %>%
mutate(price_pred = predict(knn_opt, sclass_65amg_test))
p_test = ggplot(data = sclass_65amg_test) +
geom_point(mapping = aes(x = mileage, y = price), alpha=0.5) +
ylim(500, 200000)
p_test
# now add the predictions
p_test + geom_line(aes(x = mileage, y = price_pred), color='green', size=1)+
labs(title="Prediction of price (65AMG)")
##########################################################################
library(caret)
detach("package:caret", unload = TRUE)
library(caret)
install.packages(c("askpass", "bench", "bit", "blob", "brew", "brio", "bslib", "cachem", "car", "cli", "clock", "colorspace", "commonmark", "covr", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "evaluate", "fansi", "farver", "fastmap", "fma", "fontawesome", "forecast", "fpp2", "fracdiff", "fs", "gargle", "generics", "gert", "ggformula", "ggplot2", "ggridges", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "ic.infer", "isoband", "jsonlite", "kableExtra", "kappalab", "kernlab", "knitr", "labeling", "Lahman", "later", "lavaan", "lifecycle", "lme4", "lmtest", "lobstr", "lpSolve", "lubridate", "markdown", "MatrixModels", "microbenchmark", "minqa", "mnormt", "mosaic", "mosaicCore", "mosaicData", "mvtnorm", "nloptr", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "promises", "ps", "purrr", "quantmod", "quantreg", "ragg", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "reprex", "restriktor", "rlang", "rmarkdown", "RMySQL", "roxygen2", "RPostgreSQL", "rprojroot", "RSQLite", "sass", "scales", "slider", "sp", "stargazer", "stringi", "stringr", "svglite", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "TTR", "tzdb", "urca", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "warp", "withr", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("askpass", "bench", "bit", "blob", "brew", "brio", "bslib", "cachem", "car", "cli", "clock", "colorspace", "commonmark", "covr", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "evaluate", "fansi", "farver", "fastmap", "fma", "fontawesome", "forecast", "fpp2", "fracdiff", "fs", "gargle", "generics", "gert", "ggformula", "ggplot2", "ggridges", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "ic.infer", "isoband", "jsonlite", "kableExtra", "kappalab", "kernlab", "knitr", "labeling", "Lahman", "later", "lavaan", "lifecycle", "lme4", "lmtest", "lobstr", "lpSolve", "lubridate", "markdown", "MatrixModels", "microbenchmark", "minqa", "mnormt", "mosaic", "mosaicCore", "mosaicData", "mvtnorm", "nloptr", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "promises", "ps", "purrr", "quantmod", "quantreg", "ragg", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "reprex", "restriktor", "rlang", "rmarkdown", "RMySQL", "roxygen2", "RPostgreSQL", "rprojroot", "RSQLite", "sass", "scales", "slider", "sp", "stargazer", "stringi", "stringr", "svglite", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "TTR", "tzdb", "urca", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "warp", "withr", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("askpass", "bench", "bit", "blob", "brew", "brio", "bslib", "cachem", "car", "cli", "clock", "colorspace", "commonmark", "covr", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "evaluate", "fansi", "farver", "fastmap", "fma", "fontawesome", "forecast", "fpp2", "fracdiff", "fs", "gargle", "generics", "gert", "ggformula", "ggplot2", "ggridges", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "ic.infer", "isoband", "jsonlite", "kableExtra", "kappalab", "kernlab", "knitr", "labeling", "Lahman", "later", "lavaan", "lifecycle", "lme4", "lmtest", "lobstr", "lpSolve", "lubridate", "markdown", "MatrixModels", "microbenchmark", "minqa", "mnormt", "mosaic", "mosaicCore", "mosaicData", "mvtnorm", "nloptr", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "promises", "ps", "purrr", "quantmod", "quantreg", "ragg", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "reprex", "restriktor", "rlang", "rmarkdown", "RMySQL", "roxygen2", "RPostgreSQL", "rprojroot", "RSQLite", "sass", "scales", "slider", "sp", "stargazer", "stringi", "stringr", "svglite", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "TTR", "tzdb", "urca", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "warp", "withr", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("askpass", "bench", "bit", "blob", "brew", "brio", "bslib", "cachem", "car", "cli", "clock", "colorspace", "commonmark", "covr", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "evaluate", "fansi", "farver", "fastmap", "fma", "fontawesome", "forecast", "fpp2", "fracdiff", "fs", "gargle", "generics", "gert", "ggformula", "ggplot2", "ggridges", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "ic.infer", "isoband", "jsonlite", "kableExtra", "kappalab", "kernlab", "knitr", "labeling", "Lahman", "later", "lavaan", "lifecycle", "lme4", "lmtest", "lobstr", "lpSolve", "lubridate", "markdown", "MatrixModels", "microbenchmark", "minqa", "mnormt", "mosaic", "mosaicCore", "mosaicData", "mvtnorm", "nloptr", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "promises", "ps", "purrr", "quantmod", "quantreg", "ragg", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "reprex", "restriktor", "rlang", "rmarkdown", "RMySQL", "roxygen2", "RPostgreSQL", "rprojroot", "RSQLite", "sass", "scales", "slider", "sp", "stargazer", "stringi", "stringr", "svglite", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "TTR", "tzdb", "urca", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "warp", "withr", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("askpass", "bench", "bit", "blob", "brew", "brio", "bslib", "cachem", "car", "cli", "clock", "colorspace", "commonmark", "covr", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "evaluate", "fansi", "farver", "fastmap", "fma", "fontawesome", "forecast", "fpp2", "fracdiff", "fs", "gargle", "generics", "gert", "ggformula", "ggplot2", "ggridges", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "ic.infer", "isoband", "jsonlite", "kableExtra", "kappalab", "kernlab", "knitr", "labeling", "Lahman", "later", "lavaan", "lifecycle", "lme4", "lmtest", "lobstr", "lpSolve", "lubridate", "markdown", "MatrixModels", "microbenchmark", "minqa", "mnormt", "mosaic", "mosaicCore", "mosaicData", "mvtnorm", "nloptr", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "promises", "ps", "purrr", "quantmod", "quantreg", "ragg", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "reprex", "restriktor", "rlang", "rmarkdown", "RMySQL", "roxygen2", "RPostgreSQL", "rprojroot", "RSQLite", "sass", "scales", "slider", "sp", "stargazer", "stringi", "stringr", "svglite", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "TTR", "tzdb", "urca", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "warp", "withr", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("askpass", "bench", "bit", "blob", "brew", "brio", "bslib", "cachem", "car", "cli", "clock", "colorspace", "commonmark", "covr", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "evaluate", "fansi", "farver", "fastmap", "fma", "fontawesome", "forecast", "fpp2", "fracdiff", "fs", "gargle", "generics", "gert", "ggformula", "ggplot2", "ggridges", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "ic.infer", "isoband", "jsonlite", "kableExtra", "kappalab", "kernlab", "knitr", "labeling", "Lahman", "later", "lavaan", "lifecycle", "lme4", "lmtest", "lobstr", "lpSolve", "lubridate", "markdown", "MatrixModels", "microbenchmark", "minqa", "mnormt", "mosaic", "mosaicCore", "mosaicData", "mvtnorm", "nloptr", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "promises", "ps", "purrr", "quantmod", "quantreg", "ragg", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "reprex", "restriktor", "rlang", "rmarkdown", "RMySQL", "roxygen2", "RPostgreSQL", "rprojroot", "RSQLite", "sass", "scales", "slider", "sp", "stargazer", "stringi", "stringr", "svglite", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "TTR", "tzdb", "urca", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "warp", "withr", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("askpass", "bench", "bit", "blob", "brew", "brio", "bslib", "cachem", "car", "cli", "clock", "colorspace", "commonmark", "covr", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "evaluate", "fansi", "farver", "fastmap", "fma", "fontawesome", "forecast", "fpp2", "fracdiff", "fs", "gargle", "generics", "gert", "ggformula", "ggplot2", "ggridges", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "ic.infer", "isoband", "jsonlite", "kableExtra", "kappalab", "kernlab", "knitr", "labeling", "Lahman", "later", "lavaan", "lifecycle", "lme4", "lmtest", "lobstr", "lpSolve", "lubridate", "markdown", "MatrixModels", "microbenchmark", "minqa", "mnormt", "mosaic", "mosaicCore", "mosaicData", "mvtnorm", "nloptr", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "promises", "ps", "purrr", "quantmod", "quantreg", "ragg", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "reprex", "restriktor", "rlang", "rmarkdown", "RMySQL", "roxygen2", "RPostgreSQL", "rprojroot", "RSQLite", "sass", "scales", "slider", "sp", "stargazer", "stringi", "stringr", "svglite", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "TTR", "tzdb", "urca", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "warp", "withr", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("askpass", "bench", "bit", "blob", "brew", "brio", "bslib", "cachem", "car", "cli", "clock", "colorspace", "commonmark", "covr", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "evaluate", "fansi", "farver", "fastmap", "fma", "fontawesome", "forecast", "fpp2", "fracdiff", "fs", "gargle", "generics", "gert", "ggformula", "ggplot2", "ggridges", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "ic.infer", "isoband", "jsonlite", "kableExtra", "kappalab", "kernlab", "knitr", "labeling", "Lahman", "later", "lavaan", "lifecycle", "lme4", "lmtest", "lobstr", "lpSolve", "lubridate", "markdown", "MatrixModels", "microbenchmark", "minqa", "mnormt", "mosaic", "mosaicCore", "mosaicData", "mvtnorm", "nloptr", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "promises", "ps", "purrr", "quantmod", "quantreg", "ragg", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "reprex", "restriktor", "rlang", "rmarkdown", "RMySQL", "roxygen2", "RPostgreSQL", "rprojroot", "RSQLite", "sass", "scales", "slider", "sp", "stargazer", "stringi", "stringr", "svglite", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "TTR", "tzdb", "urca", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "warp", "withr", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("askpass", "bench", "bit", "blob", "brew", "brio", "bslib", "cachem", "car", "cli", "clock", "colorspace", "commonmark", "covr", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "evaluate", "fansi", "farver", "fastmap", "fma", "fontawesome", "forecast", "fpp2", "fracdiff", "fs", "gargle", "generics", "gert", "ggformula", "ggplot2", "ggridges", "glue", "gtable", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "ic.infer", "isoband", "jsonlite", "kableExtra", "kappalab", "kernlab", "knitr", "labeling", "Lahman", "later", "lavaan", "lifecycle", "lme4", "lmtest", "lobstr", "lpSolve", "lubridate", "markdown", "MatrixModels", "microbenchmark", "minqa", "mnormt", "mosaic", "mosaicCore", "mosaicData", "mvtnorm", "nloptr", "openssl", "pbkrtest", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "promises", "ps", "purrr", "quantmod", "quantreg", "ragg", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rematch", "reprex", "restriktor", "rlang", "rmarkdown", "RMySQL", "roxygen2", "RPostgreSQL", "rprojroot", "RSQLite", "sass", "scales", "slider", "sp", "stargazer", "stringi", "stringr", "svglite", "sys", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "timeDate", "tinytex", "tseries", "TTR", "tzdb", "urca", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "warp", "withr", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
